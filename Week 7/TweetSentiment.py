# -*- coding: utf-8 -*-
"""TweetSentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OJ-17Hrnv2m4yrHYQc7EShe7XLNNkhAp

# Data Setup
---
"""

# Install the Kaggle API
!pip install kaggle

# Upload the Kaggle API Token after downloading it under your account in Kaggle
# Steps here https://www.kaggle.com/general/74235
from google.colab import files
files.upload()

# Next, Create a `.kaggle` directory under `root`
! mkdir ~/.kaggle

# Copy the API token into the created directory
! cp kaggle.json ~/.kaggle/

# Change file permissions
! chmod 600 ~/.kaggle/kaggle.json

# Download the `First GOP Debate Twitter Sentiment` Dataset 
# https://www.kaggle.com/crowdflower/first-gop-debate-twitter-sentiment

! kaggle datasets download -d crowdflower/first-gop-debate-twitter-sentiment

# Unzip the data
! unzip first-gop-debate-twitter-sentiment.zip

"""# Libraries
---
"""

# Basics
import numpy as np
import pandas as pd
import re

# Sklearn
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split

# Keras
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
from keras.utils.np_utils import to_categorical

# For visual representation later on
import matplotlib.pyplot as plt

"""# Reading Data
---
"""

# read the dataset
df = pd.read_csv('Sentiment.csv')
df.head()

# keep only the neccessary columns
df = df[['text','sentiment']]

# outputting data
df.head()

"""# Text Preprocessing
---
"""

df = df[df.sentiment != "Neutral"] # getting rid of the neutral sentiments

# filter tweets --> only valid text remains
df['text'] = df['text'].apply(lambda x: x.lower()) # put all text in lowercase
df['text'] = df['text'].apply((lambda x: re.sub('[^a-zA-z0-9\s]','',x))) # take out the unnecessary symbols

for i,r in df.iterrows():
    r[0] = r[0].replace('rt',' ') # delete the "RT" at the beginning of each tweet

df.head()

m = 2000 # setting max features to 2000
# Use tokenizer (Tokenizer) to vectorize and convert text to sequence
# This way, Network will be able to get the text as input
tokenizer = Tokenizer(num_words=m, split=' ')
tokenizer.fit_on_texts(df['text'].values)
X = tokenizer.texts_to_sequences(df['text'].values)
X = pad_sequences(X)
print(X)

"""#Creating the Model
---
"""

# numbers need to be played around w/ --> more accurate results
e = 128
l = 196

# composing LSTM Network
# Categorical crossentropy --> we have to use softmax activation function
model = Sequential()
model.add(Embedding(m, e, input_length = X.shape[1]))
model.add(SpatialDropout1D(0.4))
model.add(LSTM(l, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2,activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model.summary())

"""#Splitting Training and Testing Datasets
---
"""

Y = pd.get_dummies(df['sentiment']).values

# split the training and testing datasets
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 42)
print(X_train.shape,Y_train.shape)
print(X_test.shape,Y_test.shape)

"""#Training the Model
---
"""

history = model.fit(X_train, Y_train, epochs = 10, batch_size=32, verbose = 2)

"""#Measuring Score and Accuracy of Validation Set


---
"""

validation_size = 1500

X_validate = X_test[-validation_size:]
Y_validate = Y_test[-validation_size:]
X_test = X_test[:-validation_size]
Y_test = Y_test[:-validation_size]

# evaluating the model using validation set
sc,ac = model.evaluate(X_test, Y_test, verbose = 2, batch_size = 32)
print("score: %.2f" % (sc))
print("acc: %.2f" % (ac))

"""# Measuring Model's Overall Accuracy
---
"""

pos_cnt, neg_cnt, pos_correct, neg_correct = 0, 0, 0, 0
for x in range(len(X_validate)):
    
    result = model.predict(X_validate[x].reshape(1,X_test.shape[1]),batch_size=1,verbose = 2)[0]
   
    # if the sentiment is the same
    if np.argmax(result) == np.argmax(Y_validate[x]):
        # check sentiment polarity --> increment accuracy
        if np.argmax(Y_validate[x]) == 0:
            neg_correct += 1
        else:
            pos_correct += 1
    # if the sentiment is different --> incorrect (don't increment accuracy)
    if np.argmax(Y_validate[x]) == 0:
        neg_cnt += 1
    else:
        pos_cnt += 1



print("pos_acc", pos_correct/pos_cnt*100, "%")
print("neg_acc", neg_correct/neg_cnt*100, "%")

"""# Visual Representation of Accuracy and Loss
---
"""

# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""#Test Run
---
"""

twt = ['Username123: This was a good demo.']
#vectorizing the tweet by the pre-fitted tokenizer instance
twt = tokenizer.texts_to_sequences(twt)
#padding the tweet for better formating
twt = pad_sequences(twt, maxlen=28, dtype='int32', value=0)
print(twt)

# using model to predict the test run
sentiment = model.predict(twt,batch_size=1,verbose = 2)[0]
if(np.argmax(sentiment) == 0):
    print("negative")
elif (np.argmax(sentiment) == 1):
    print("positive")
